// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto;
namespace pb {
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Resource;
struct ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class Scene;
struct SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Vec2;
struct Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Node* Arena::CreateMaybeMessage<::pb::Node>(Arena*);
template<> ::pb::Resource* Arena::CreateMaybeMessage<::pb::Resource>(Arena*);
template<> ::pb::Scene* Arena::CreateMaybeMessage<::pb::Scene>(Arena*);
template<> ::pb::Vec2* Arena::CreateMaybeMessage<::pb::Vec2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Vec2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Vec2) */ {
 public:
  inline Vec2() : Vec2(nullptr) {}
  ~Vec2() override;
  explicit PROTOBUF_CONSTEXPR Vec2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec2(const Vec2& from);
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2& operator=(Vec2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vec2& from) {
    Vec2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Vec2";
  }
  protected:
  explicit Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Vec2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Resource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  ~Resource() override;
  explicit PROTOBUF_CONSTEXPR Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Resource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Resource& from) {
    Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Resource";
  }
  protected:
  explicit Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string path = 3;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 type = 2;
  void clear_type();
  uint64_t type() const;
  void set_type(uint64_t value);
  private:
  uint64_t _internal_type() const;
  void _internal_set_type(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    uint64_t id_;
    uint64_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviourFieldNumber = 5,
    kGroupFieldNumber = 6,
    kTypeFieldNumber = 3,
    kNameFieldNumber = 4,
    kBodyTypeFieldNumber = 107,
    kPositionFieldNumber = 103,
    kScaleFieldNumber = 104,
    kZoomFieldNumber = 119,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kStreamFieldNumber = 101,
    kRotationFieldNumber = 105,
    kZIndexFieldNumber = 106,
    kVisibleFieldNumber = 100,
    kAutoplayFieldNumber = 102,
    kPlayingFieldNumber = 118,
    kWidthFieldNumber = 108,
    kHeightFieldNumber = 109,
    kRadiusFieldNumber = 110,
    kTextureFieldNumber = 111,
    kColorRedFieldNumber = 112,
    kColorGreenFieldNumber = 113,
    kColorBlueFieldNumber = 114,
    kColorAlphaFieldNumber = 115,
    kSpritesheetFieldNumber = 116,
    kSpeedFieldNumber = 117,
  };
  // repeated string behaviour = 5;
  int behaviour_size() const;
  private:
  int _internal_behaviour_size() const;
  public:
  void clear_behaviour();
  const std::string& behaviour(int index) const;
  std::string* mutable_behaviour(int index);
  void set_behaviour(int index, const std::string& value);
  void set_behaviour(int index, std::string&& value);
  void set_behaviour(int index, const char* value);
  void set_behaviour(int index, const char* value, size_t size);
  std::string* add_behaviour();
  void add_behaviour(const std::string& value);
  void add_behaviour(std::string&& value);
  void add_behaviour(const char* value);
  void add_behaviour(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& behaviour() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_behaviour();
  private:
  const std::string& _internal_behaviour(int index) const;
  std::string* _internal_add_behaviour();
  public:

  // repeated string group = 6;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  const std::string& group(int index) const;
  std::string* mutable_group(int index);
  void set_group(int index, const std::string& value);
  void set_group(int index, std::string&& value);
  void set_group(int index, const char* value);
  void set_group(int index, const char* value, size_t size);
  std::string* add_group();
  void add_group(const std::string& value);
  void add_group(std::string&& value);
  void add_group(const char* value);
  void add_group(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group();
  private:
  const std::string& _internal_group(int index) const;
  std::string* _internal_add_group();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string body_type = 107;
  bool has_body_type() const;
  private:
  bool _internal_has_body_type() const;
  public:
  void clear_body_type();
  const std::string& body_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body_type();
  PROTOBUF_NODISCARD std::string* release_body_type();
  void set_allocated_body_type(std::string* body_type);
  private:
  const std::string& _internal_body_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_type(const std::string& value);
  std::string* _internal_mutable_body_type();
  public:

  // optional .pb.Vec2 position = 103;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::pb::Vec2& position() const;
  PROTOBUF_NODISCARD ::pb::Vec2* release_position();
  ::pb::Vec2* mutable_position();
  void set_allocated_position(::pb::Vec2* position);
  private:
  const ::pb::Vec2& _internal_position() const;
  ::pb::Vec2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::pb::Vec2* position);
  ::pb::Vec2* unsafe_arena_release_position();

  // optional .pb.Vec2 scale = 104;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::pb::Vec2& scale() const;
  PROTOBUF_NODISCARD ::pb::Vec2* release_scale();
  ::pb::Vec2* mutable_scale();
  void set_allocated_scale(::pb::Vec2* scale);
  private:
  const ::pb::Vec2& _internal_scale() const;
  ::pb::Vec2* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::pb::Vec2* scale);
  ::pb::Vec2* unsafe_arena_release_scale();

  // optional .pb.Vec2 zoom = 119;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  const ::pb::Vec2& zoom() const;
  PROTOBUF_NODISCARD ::pb::Vec2* release_zoom();
  ::pb::Vec2* mutable_zoom();
  void set_allocated_zoom(::pb::Vec2* zoom);
  private:
  const ::pb::Vec2& _internal_zoom() const;
  ::pb::Vec2* _internal_mutable_zoom();
  public:
  void unsafe_arena_set_allocated_zoom(
      ::pb::Vec2* zoom);
  ::pb::Vec2* unsafe_arena_release_zoom();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 parent_id = 2;
  void clear_parent_id();
  uint64_t parent_id() const;
  void set_parent_id(uint64_t value);
  private:
  uint64_t _internal_parent_id() const;
  void _internal_set_parent_id(uint64_t value);
  public:

  // optional int32 stream = 101;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  int32_t stream() const;
  void set_stream(int32_t value);
  private:
  int32_t _internal_stream() const;
  void _internal_set_stream(int32_t value);
  public:

  // optional float rotation = 105;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional float z_index = 106;
  bool has_z_index() const;
  private:
  bool _internal_has_z_index() const;
  public:
  void clear_z_index();
  float z_index() const;
  void set_z_index(float value);
  private:
  float _internal_z_index() const;
  void _internal_set_z_index(float value);
  public:

  // optional bool visible = 100;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional bool autoplay = 102;
  bool has_autoplay() const;
  private:
  bool _internal_has_autoplay() const;
  public:
  void clear_autoplay();
  bool autoplay() const;
  void set_autoplay(bool value);
  private:
  bool _internal_autoplay() const;
  void _internal_set_autoplay(bool value);
  public:

  // optional bool playing = 118;
  bool has_playing() const;
  private:
  bool _internal_has_playing() const;
  public:
  void clear_playing();
  bool playing() const;
  void set_playing(bool value);
  private:
  bool _internal_playing() const;
  void _internal_set_playing(bool value);
  public:

  // optional float width = 108;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 109;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // optional float radius = 110;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // optional int32 texture = 111;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  int32_t texture() const;
  void set_texture(int32_t value);
  private:
  int32_t _internal_texture() const;
  void _internal_set_texture(int32_t value);
  public:

  // optional float color_red = 112;
  bool has_color_red() const;
  private:
  bool _internal_has_color_red() const;
  public:
  void clear_color_red();
  float color_red() const;
  void set_color_red(float value);
  private:
  float _internal_color_red() const;
  void _internal_set_color_red(float value);
  public:

  // optional float color_green = 113;
  bool has_color_green() const;
  private:
  bool _internal_has_color_green() const;
  public:
  void clear_color_green();
  float color_green() const;
  void set_color_green(float value);
  private:
  float _internal_color_green() const;
  void _internal_set_color_green(float value);
  public:

  // optional float color_blue = 114;
  bool has_color_blue() const;
  private:
  bool _internal_has_color_blue() const;
  public:
  void clear_color_blue();
  float color_blue() const;
  void set_color_blue(float value);
  private:
  float _internal_color_blue() const;
  void _internal_set_color_blue(float value);
  public:

  // optional float color_alpha = 115;
  bool has_color_alpha() const;
  private:
  bool _internal_has_color_alpha() const;
  public:
  void clear_color_alpha();
  float color_alpha() const;
  void set_color_alpha(float value);
  private:
  float _internal_color_alpha() const;
  void _internal_set_color_alpha(float value);
  public:

  // optional int32 spritesheet = 116;
  bool has_spritesheet() const;
  private:
  bool _internal_has_spritesheet() const;
  public:
  void clear_spritesheet();
  int32_t spritesheet() const;
  void set_spritesheet(int32_t value);
  private:
  int32_t _internal_spritesheet() const;
  void _internal_set_spritesheet(int32_t value);
  public:

  // optional float speed = 117;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> behaviour_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_type_;
    ::pb::Vec2* position_;
    ::pb::Vec2* scale_;
    ::pb::Vec2* zoom_;
    uint64_t id_;
    uint64_t parent_id_;
    int32_t stream_;
    float rotation_;
    float z_index_;
    bool visible_;
    bool autoplay_;
    bool playing_;
    float width_;
    float height_;
    float radius_;
    int32_t texture_;
    float color_red_;
    float color_green_;
    float color_blue_;
    float color_alpha_;
    int32_t spritesheet_;
    float speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Scene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  ~Scene() override;
  explicit PROTOBUF_CONSTEXPR Scene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene& from) {
    Scene::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 2,
    kNodeFieldNumber = 4,
    kActiveCamera2DFieldNumber = 1,
    kRootIdFieldNumber = 3,
  };
  // repeated .pb.Resource resource = 2;
  int resource_size() const;
  private:
  int _internal_resource_size() const;
  public:
  void clear_resource();
  ::pb::Resource* mutable_resource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Resource >*
      mutable_resource();
  private:
  const ::pb::Resource& _internal_resource(int index) const;
  ::pb::Resource* _internal_add_resource();
  public:
  const ::pb::Resource& resource(int index) const;
  ::pb::Resource* add_resource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Resource >&
      resource() const;

  // repeated .pb.Node node = 4;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::pb::Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Node >*
      mutable_node();
  private:
  const ::pb::Node& _internal_node(int index) const;
  ::pb::Node* _internal_add_node();
  public:
  const ::pb::Node& node(int index) const;
  ::pb::Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Node >&
      node() const;

  // uint64 active_camera_2d = 1;
  void clear_active_camera_2d();
  uint64_t active_camera_2d() const;
  void set_active_camera_2d(uint64_t value);
  private:
  uint64_t _internal_active_camera_2d() const;
  void _internal_set_active_camera_2d(uint64_t value);
  public:

  // uint64 root_id = 3;
  void clear_root_id();
  uint64_t root_id() const;
  void set_root_id(uint64_t value);
  private:
  uint64_t _internal_root_id() const;
  void _internal_set_root_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Resource > resource_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Node > node_;
    uint64_t active_camera_2d_;
    uint64_t root_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2

// float x = 1;
inline void Vec2::clear_x() {
  _impl_.x_ = 0;
}
inline float Vec2::_internal_x() const {
  return _impl_.x_;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:pb.Vec2.x)
  return _internal_x();
}
inline void Vec2::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pb.Vec2.x)
}

// float y = 2;
inline void Vec2::clear_y() {
  _impl_.y_ = 0;
}
inline float Vec2::_internal_y() const {
  return _impl_.y_;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:pb.Vec2.y)
  return _internal_y();
}
inline void Vec2::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pb.Vec2.y)
}

// -------------------------------------------------------------------

// Resource

// uint64 id = 1;
inline void Resource::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Resource::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Resource::id() const {
  // @@protoc_insertion_point(field_get:pb.Resource.id)
  return _internal_id();
}
inline void Resource::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Resource::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.Resource.id)
}

// uint64 type = 2;
inline void Resource::clear_type() {
  _impl_.type_ = uint64_t{0u};
}
inline uint64_t Resource::_internal_type() const {
  return _impl_.type_;
}
inline uint64_t Resource::type() const {
  // @@protoc_insertion_point(field_get:pb.Resource.type)
  return _internal_type();
}
inline void Resource::_internal_set_type(uint64_t value) {
  
  _impl_.type_ = value;
}
inline void Resource::set_type(uint64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.Resource.type)
}

// string path = 3;
inline void Resource::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Resource::path() const {
  // @@protoc_insertion_point(field_get:pb.Resource.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Resource.path)
}
inline std::string* Resource::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:pb.Resource.path)
  return _s;
}
inline const std::string& Resource::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Resource::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_path() {
  // @@protoc_insertion_point(field_release:pb.Resource.path)
  return _impl_.path_.Release();
}
inline void Resource::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Resource.path)
}

// -------------------------------------------------------------------

// Node

// uint64 id = 1;
inline void Node::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Node::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Node::id() const {
  // @@protoc_insertion_point(field_get:pb.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Node::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.Node.id)
}

// uint64 parent_id = 2;
inline void Node::clear_parent_id() {
  _impl_.parent_id_ = uint64_t{0u};
}
inline uint64_t Node::_internal_parent_id() const {
  return _impl_.parent_id_;
}
inline uint64_t Node::parent_id() const {
  // @@protoc_insertion_point(field_get:pb.Node.parent_id)
  return _internal_parent_id();
}
inline void Node::_internal_set_parent_id(uint64_t value) {
  
  _impl_.parent_id_ = value;
}
inline void Node::set_parent_id(uint64_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:pb.Node.parent_id)
}

// string type = 3;
inline void Node::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Node::type() const {
  // @@protoc_insertion_point(field_get:pb.Node.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Node.type)
}
inline std::string* Node::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:pb.Node.type)
  return _s;
}
inline const std::string& Node::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Node::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_type() {
  // @@protoc_insertion_point(field_release:pb.Node.type)
  return _impl_.type_.Release();
}
inline void Node::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Node.type)
}

// string name = 4;
inline void Node::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:pb.Node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Node.name)
}
inline std::string* Node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:pb.Node.name)
  return _impl_.name_.Release();
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Node.name)
}

// repeated string behaviour = 5;
inline int Node::_internal_behaviour_size() const {
  return _impl_.behaviour_.size();
}
inline int Node::behaviour_size() const {
  return _internal_behaviour_size();
}
inline void Node::clear_behaviour() {
  _impl_.behaviour_.Clear();
}
inline std::string* Node::add_behaviour() {
  std::string* _s = _internal_add_behaviour();
  // @@protoc_insertion_point(field_add_mutable:pb.Node.behaviour)
  return _s;
}
inline const std::string& Node::_internal_behaviour(int index) const {
  return _impl_.behaviour_.Get(index);
}
inline const std::string& Node::behaviour(int index) const {
  // @@protoc_insertion_point(field_get:pb.Node.behaviour)
  return _internal_behaviour(index);
}
inline std::string* Node::mutable_behaviour(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Node.behaviour)
  return _impl_.behaviour_.Mutable(index);
}
inline void Node::set_behaviour(int index, const std::string& value) {
  _impl_.behaviour_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.Node.behaviour)
}
inline void Node::set_behaviour(int index, std::string&& value) {
  _impl_.behaviour_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.Node.behaviour)
}
inline void Node::set_behaviour(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.behaviour_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Node.behaviour)
}
inline void Node::set_behaviour(int index, const char* value, size_t size) {
  _impl_.behaviour_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Node.behaviour)
}
inline std::string* Node::_internal_add_behaviour() {
  return _impl_.behaviour_.Add();
}
inline void Node::add_behaviour(const std::string& value) {
  _impl_.behaviour_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Node.behaviour)
}
inline void Node::add_behaviour(std::string&& value) {
  _impl_.behaviour_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Node.behaviour)
}
inline void Node::add_behaviour(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.behaviour_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Node.behaviour)
}
inline void Node::add_behaviour(const char* value, size_t size) {
  _impl_.behaviour_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Node.behaviour)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::behaviour() const {
  // @@protoc_insertion_point(field_list:pb.Node.behaviour)
  return _impl_.behaviour_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_behaviour() {
  // @@protoc_insertion_point(field_mutable_list:pb.Node.behaviour)
  return &_impl_.behaviour_;
}

// repeated string group = 6;
inline int Node::_internal_group_size() const {
  return _impl_.group_.size();
}
inline int Node::group_size() const {
  return _internal_group_size();
}
inline void Node::clear_group() {
  _impl_.group_.Clear();
}
inline std::string* Node::add_group() {
  std::string* _s = _internal_add_group();
  // @@protoc_insertion_point(field_add_mutable:pb.Node.group)
  return _s;
}
inline const std::string& Node::_internal_group(int index) const {
  return _impl_.group_.Get(index);
}
inline const std::string& Node::group(int index) const {
  // @@protoc_insertion_point(field_get:pb.Node.group)
  return _internal_group(index);
}
inline std::string* Node::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Node.group)
  return _impl_.group_.Mutable(index);
}
inline void Node::set_group(int index, const std::string& value) {
  _impl_.group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.Node.group)
}
inline void Node::set_group(int index, std::string&& value) {
  _impl_.group_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.Node.group)
}
inline void Node::set_group(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Node.group)
}
inline void Node::set_group(int index, const char* value, size_t size) {
  _impl_.group_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Node.group)
}
inline std::string* Node::_internal_add_group() {
  return _impl_.group_.Add();
}
inline void Node::add_group(const std::string& value) {
  _impl_.group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Node.group)
}
inline void Node::add_group(std::string&& value) {
  _impl_.group_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Node.group)
}
inline void Node::add_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Node.group)
}
inline void Node::add_group(const char* value, size_t size) {
  _impl_.group_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Node.group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::group() const {
  // @@protoc_insertion_point(field_list:pb.Node.group)
  return _impl_.group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:pb.Node.group)
  return &_impl_.group_;
}

// optional bool visible = 100;
inline bool Node::_internal_has_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Node::has_visible() const {
  return _internal_has_visible();
}
inline void Node::clear_visible() {
  _impl_.visible_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Node::_internal_visible() const {
  return _impl_.visible_;
}
inline bool Node::visible() const {
  // @@protoc_insertion_point(field_get:pb.Node.visible)
  return _internal_visible();
}
inline void Node::_internal_set_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.visible_ = value;
}
inline void Node::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:pb.Node.visible)
}

// optional int32 stream = 101;
inline bool Node::_internal_has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Node::has_stream() const {
  return _internal_has_stream();
}
inline void Node::clear_stream() {
  _impl_.stream_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Node::_internal_stream() const {
  return _impl_.stream_;
}
inline int32_t Node::stream() const {
  // @@protoc_insertion_point(field_get:pb.Node.stream)
  return _internal_stream();
}
inline void Node::_internal_set_stream(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stream_ = value;
}
inline void Node::set_stream(int32_t value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:pb.Node.stream)
}

// optional bool autoplay = 102;
inline bool Node::_internal_has_autoplay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Node::has_autoplay() const {
  return _internal_has_autoplay();
}
inline void Node::clear_autoplay() {
  _impl_.autoplay_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Node::_internal_autoplay() const {
  return _impl_.autoplay_;
}
inline bool Node::autoplay() const {
  // @@protoc_insertion_point(field_get:pb.Node.autoplay)
  return _internal_autoplay();
}
inline void Node::_internal_set_autoplay(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.autoplay_ = value;
}
inline void Node::set_autoplay(bool value) {
  _internal_set_autoplay(value);
  // @@protoc_insertion_point(field_set:pb.Node.autoplay)
}

// optional .pb.Vec2 position = 103;
inline bool Node::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Node::has_position() const {
  return _internal_has_position();
}
inline void Node::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::Vec2& Node::_internal_position() const {
  const ::pb::Vec2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vec2&>(
      ::pb::_Vec2_default_instance_);
}
inline const ::pb::Vec2& Node::position() const {
  // @@protoc_insertion_point(field_get:pb.Node.position)
  return _internal_position();
}
inline void Node::unsafe_arena_set_allocated_position(
    ::pb::Vec2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Node.position)
}
inline ::pb::Vec2* Node::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb::Vec2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Vec2* Node::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:pb.Node.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb::Vec2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::pb::Vec2* Node::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vec2>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::pb::Vec2* Node::mutable_position() {
  ::pb::Vec2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:pb.Node.position)
  return _msg;
}
inline void Node::set_allocated_position(::pb::Vec2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.Node.position)
}

// optional .pb.Vec2 scale = 104;
inline bool Node::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_ != nullptr);
  return value;
}
inline bool Node::has_scale() const {
  return _internal_has_scale();
}
inline void Node::clear_scale() {
  if (_impl_.scale_ != nullptr) _impl_.scale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::pb::Vec2& Node::_internal_scale() const {
  const ::pb::Vec2* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vec2&>(
      ::pb::_Vec2_default_instance_);
}
inline const ::pb::Vec2& Node::scale() const {
  // @@protoc_insertion_point(field_get:pb.Node.scale)
  return _internal_scale();
}
inline void Node::unsafe_arena_set_allocated_scale(
    ::pb::Vec2* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Node.scale)
}
inline ::pb::Vec2* Node::release_scale() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::pb::Vec2* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Vec2* Node::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:pb.Node.scale)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::pb::Vec2* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::pb::Vec2* Node::_internal_mutable_scale() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vec2>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::pb::Vec2* Node::mutable_scale() {
  ::pb::Vec2* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:pb.Node.scale)
  return _msg;
}
inline void Node::set_allocated_scale(::pb::Vec2* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:pb.Node.scale)
}

// optional float rotation = 105;
inline bool Node::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Node::has_rotation() const {
  return _internal_has_rotation();
}
inline void Node::clear_rotation() {
  _impl_.rotation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Node::_internal_rotation() const {
  return _impl_.rotation_;
}
inline float Node::rotation() const {
  // @@protoc_insertion_point(field_get:pb.Node.rotation)
  return _internal_rotation();
}
inline void Node::_internal_set_rotation(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rotation_ = value;
}
inline void Node::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:pb.Node.rotation)
}

// optional float z_index = 106;
inline bool Node::_internal_has_z_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Node::has_z_index() const {
  return _internal_has_z_index();
}
inline void Node::clear_z_index() {
  _impl_.z_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Node::_internal_z_index() const {
  return _impl_.z_index_;
}
inline float Node::z_index() const {
  // @@protoc_insertion_point(field_get:pb.Node.z_index)
  return _internal_z_index();
}
inline void Node::_internal_set_z_index(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.z_index_ = value;
}
inline void Node::set_z_index(float value) {
  _internal_set_z_index(value);
  // @@protoc_insertion_point(field_set:pb.Node.z_index)
}

// optional string body_type = 107;
inline bool Node::_internal_has_body_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_body_type() const {
  return _internal_has_body_type();
}
inline void Node::clear_body_type() {
  _impl_.body_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Node::body_type() const {
  // @@protoc_insertion_point(field_get:pb.Node.body_type)
  return _internal_body_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_body_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.body_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Node.body_type)
}
inline std::string* Node::mutable_body_type() {
  std::string* _s = _internal_mutable_body_type();
  // @@protoc_insertion_point(field_mutable:pb.Node.body_type)
  return _s;
}
inline const std::string& Node::_internal_body_type() const {
  return _impl_.body_type_.Get();
}
inline void Node::_internal_set_body_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.body_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_body_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.body_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_body_type() {
  // @@protoc_insertion_point(field_release:pb.Node.body_type)
  if (!_internal_has_body_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.body_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_type_.IsDefault()) {
    _impl_.body_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_body_type(std::string* body_type) {
  if (body_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_type_.SetAllocated(body_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_type_.IsDefault()) {
    _impl_.body_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Node.body_type)
}

// optional float width = 108;
inline bool Node::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Node::has_width() const {
  return _internal_has_width();
}
inline void Node::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Node::_internal_width() const {
  return _impl_.width_;
}
inline float Node::width() const {
  // @@protoc_insertion_point(field_get:pb.Node.width)
  return _internal_width();
}
inline void Node::_internal_set_width(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.width_ = value;
}
inline void Node::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pb.Node.width)
}

// optional float height = 109;
inline bool Node::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Node::has_height() const {
  return _internal_has_height();
}
inline void Node::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Node::_internal_height() const {
  return _impl_.height_;
}
inline float Node::height() const {
  // @@protoc_insertion_point(field_get:pb.Node.height)
  return _internal_height();
}
inline void Node::_internal_set_height(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.height_ = value;
}
inline void Node::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.Node.height)
}

// optional float radius = 110;
inline bool Node::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Node::has_radius() const {
  return _internal_has_radius();
}
inline void Node::clear_radius() {
  _impl_.radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float Node::_internal_radius() const {
  return _impl_.radius_;
}
inline float Node::radius() const {
  // @@protoc_insertion_point(field_get:pb.Node.radius)
  return _internal_radius();
}
inline void Node::_internal_set_radius(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.radius_ = value;
}
inline void Node::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:pb.Node.radius)
}

// optional int32 texture = 111;
inline bool Node::_internal_has_texture() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Node::has_texture() const {
  return _internal_has_texture();
}
inline void Node::clear_texture() {
  _impl_.texture_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t Node::_internal_texture() const {
  return _impl_.texture_;
}
inline int32_t Node::texture() const {
  // @@protoc_insertion_point(field_get:pb.Node.texture)
  return _internal_texture();
}
inline void Node::_internal_set_texture(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.texture_ = value;
}
inline void Node::set_texture(int32_t value) {
  _internal_set_texture(value);
  // @@protoc_insertion_point(field_set:pb.Node.texture)
}

// optional float color_red = 112;
inline bool Node::_internal_has_color_red() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Node::has_color_red() const {
  return _internal_has_color_red();
}
inline void Node::clear_color_red() {
  _impl_.color_red_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Node::_internal_color_red() const {
  return _impl_.color_red_;
}
inline float Node::color_red() const {
  // @@protoc_insertion_point(field_get:pb.Node.color_red)
  return _internal_color_red();
}
inline void Node::_internal_set_color_red(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.color_red_ = value;
}
inline void Node::set_color_red(float value) {
  _internal_set_color_red(value);
  // @@protoc_insertion_point(field_set:pb.Node.color_red)
}

// optional float color_green = 113;
inline bool Node::_internal_has_color_green() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Node::has_color_green() const {
  return _internal_has_color_green();
}
inline void Node::clear_color_green() {
  _impl_.color_green_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float Node::_internal_color_green() const {
  return _impl_.color_green_;
}
inline float Node::color_green() const {
  // @@protoc_insertion_point(field_get:pb.Node.color_green)
  return _internal_color_green();
}
inline void Node::_internal_set_color_green(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.color_green_ = value;
}
inline void Node::set_color_green(float value) {
  _internal_set_color_green(value);
  // @@protoc_insertion_point(field_set:pb.Node.color_green)
}

// optional float color_blue = 114;
inline bool Node::_internal_has_color_blue() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Node::has_color_blue() const {
  return _internal_has_color_blue();
}
inline void Node::clear_color_blue() {
  _impl_.color_blue_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float Node::_internal_color_blue() const {
  return _impl_.color_blue_;
}
inline float Node::color_blue() const {
  // @@protoc_insertion_point(field_get:pb.Node.color_blue)
  return _internal_color_blue();
}
inline void Node::_internal_set_color_blue(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.color_blue_ = value;
}
inline void Node::set_color_blue(float value) {
  _internal_set_color_blue(value);
  // @@protoc_insertion_point(field_set:pb.Node.color_blue)
}

// optional float color_alpha = 115;
inline bool Node::_internal_has_color_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Node::has_color_alpha() const {
  return _internal_has_color_alpha();
}
inline void Node::clear_color_alpha() {
  _impl_.color_alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float Node::_internal_color_alpha() const {
  return _impl_.color_alpha_;
}
inline float Node::color_alpha() const {
  // @@protoc_insertion_point(field_get:pb.Node.color_alpha)
  return _internal_color_alpha();
}
inline void Node::_internal_set_color_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.color_alpha_ = value;
}
inline void Node::set_color_alpha(float value) {
  _internal_set_color_alpha(value);
  // @@protoc_insertion_point(field_set:pb.Node.color_alpha)
}

// optional int32 spritesheet = 116;
inline bool Node::_internal_has_spritesheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Node::has_spritesheet() const {
  return _internal_has_spritesheet();
}
inline void Node::clear_spritesheet() {
  _impl_.spritesheet_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t Node::_internal_spritesheet() const {
  return _impl_.spritesheet_;
}
inline int32_t Node::spritesheet() const {
  // @@protoc_insertion_point(field_get:pb.Node.spritesheet)
  return _internal_spritesheet();
}
inline void Node::_internal_set_spritesheet(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.spritesheet_ = value;
}
inline void Node::set_spritesheet(int32_t value) {
  _internal_set_spritesheet(value);
  // @@protoc_insertion_point(field_set:pb.Node.spritesheet)
}

// optional float speed = 117;
inline bool Node::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Node::has_speed() const {
  return _internal_has_speed();
}
inline void Node::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float Node::_internal_speed() const {
  return _impl_.speed_;
}
inline float Node::speed() const {
  // @@protoc_insertion_point(field_get:pb.Node.speed)
  return _internal_speed();
}
inline void Node::_internal_set_speed(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.speed_ = value;
}
inline void Node::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:pb.Node.speed)
}

// optional bool playing = 118;
inline bool Node::_internal_has_playing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Node::has_playing() const {
  return _internal_has_playing();
}
inline void Node::clear_playing() {
  _impl_.playing_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Node::_internal_playing() const {
  return _impl_.playing_;
}
inline bool Node::playing() const {
  // @@protoc_insertion_point(field_get:pb.Node.playing)
  return _internal_playing();
}
inline void Node::_internal_set_playing(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.playing_ = value;
}
inline void Node::set_playing(bool value) {
  _internal_set_playing(value);
  // @@protoc_insertion_point(field_set:pb.Node.playing)
}

// optional .pb.Vec2 zoom = 119;
inline bool Node::_internal_has_zoom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zoom_ != nullptr);
  return value;
}
inline bool Node::has_zoom() const {
  return _internal_has_zoom();
}
inline void Node::clear_zoom() {
  if (_impl_.zoom_ != nullptr) _impl_.zoom_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::pb::Vec2& Node::_internal_zoom() const {
  const ::pb::Vec2* p = _impl_.zoom_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vec2&>(
      ::pb::_Vec2_default_instance_);
}
inline const ::pb::Vec2& Node::zoom() const {
  // @@protoc_insertion_point(field_get:pb.Node.zoom)
  return _internal_zoom();
}
inline void Node::unsafe_arena_set_allocated_zoom(
    ::pb::Vec2* zoom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zoom_);
  }
  _impl_.zoom_ = zoom;
  if (zoom) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Node.zoom)
}
inline ::pb::Vec2* Node::release_zoom() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::pb::Vec2* temp = _impl_.zoom_;
  _impl_.zoom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Vec2* Node::unsafe_arena_release_zoom() {
  // @@protoc_insertion_point(field_release:pb.Node.zoom)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::pb::Vec2* temp = _impl_.zoom_;
  _impl_.zoom_ = nullptr;
  return temp;
}
inline ::pb::Vec2* Node::_internal_mutable_zoom() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.zoom_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vec2>(GetArenaForAllocation());
    _impl_.zoom_ = p;
  }
  return _impl_.zoom_;
}
inline ::pb::Vec2* Node::mutable_zoom() {
  ::pb::Vec2* _msg = _internal_mutable_zoom();
  // @@protoc_insertion_point(field_mutable:pb.Node.zoom)
  return _msg;
}
inline void Node::set_allocated_zoom(::pb::Vec2* zoom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zoom_;
  }
  if (zoom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zoom);
    if (message_arena != submessage_arena) {
      zoom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zoom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.zoom_ = zoom;
  // @@protoc_insertion_point(field_set_allocated:pb.Node.zoom)
}

// -------------------------------------------------------------------

// Scene

// uint64 active_camera_2d = 1;
inline void Scene::clear_active_camera_2d() {
  _impl_.active_camera_2d_ = uint64_t{0u};
}
inline uint64_t Scene::_internal_active_camera_2d() const {
  return _impl_.active_camera_2d_;
}
inline uint64_t Scene::active_camera_2d() const {
  // @@protoc_insertion_point(field_get:pb.Scene.active_camera_2d)
  return _internal_active_camera_2d();
}
inline void Scene::_internal_set_active_camera_2d(uint64_t value) {
  
  _impl_.active_camera_2d_ = value;
}
inline void Scene::set_active_camera_2d(uint64_t value) {
  _internal_set_active_camera_2d(value);
  // @@protoc_insertion_point(field_set:pb.Scene.active_camera_2d)
}

// repeated .pb.Resource resource = 2;
inline int Scene::_internal_resource_size() const {
  return _impl_.resource_.size();
}
inline int Scene::resource_size() const {
  return _internal_resource_size();
}
inline void Scene::clear_resource() {
  _impl_.resource_.Clear();
}
inline ::pb::Resource* Scene::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Scene.resource)
  return _impl_.resource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Resource >*
Scene::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:pb.Scene.resource)
  return &_impl_.resource_;
}
inline const ::pb::Resource& Scene::_internal_resource(int index) const {
  return _impl_.resource_.Get(index);
}
inline const ::pb::Resource& Scene::resource(int index) const {
  // @@protoc_insertion_point(field_get:pb.Scene.resource)
  return _internal_resource(index);
}
inline ::pb::Resource* Scene::_internal_add_resource() {
  return _impl_.resource_.Add();
}
inline ::pb::Resource* Scene::add_resource() {
  ::pb::Resource* _add = _internal_add_resource();
  // @@protoc_insertion_point(field_add:pb.Scene.resource)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Resource >&
Scene::resource() const {
  // @@protoc_insertion_point(field_list:pb.Scene.resource)
  return _impl_.resource_;
}

// uint64 root_id = 3;
inline void Scene::clear_root_id() {
  _impl_.root_id_ = uint64_t{0u};
}
inline uint64_t Scene::_internal_root_id() const {
  return _impl_.root_id_;
}
inline uint64_t Scene::root_id() const {
  // @@protoc_insertion_point(field_get:pb.Scene.root_id)
  return _internal_root_id();
}
inline void Scene::_internal_set_root_id(uint64_t value) {
  
  _impl_.root_id_ = value;
}
inline void Scene::set_root_id(uint64_t value) {
  _internal_set_root_id(value);
  // @@protoc_insertion_point(field_set:pb.Scene.root_id)
}

// repeated .pb.Node node = 4;
inline int Scene::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int Scene::node_size() const {
  return _internal_node_size();
}
inline void Scene::clear_node() {
  _impl_.node_.Clear();
}
inline ::pb::Node* Scene::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Scene.node)
  return _impl_.node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Node >*
Scene::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:pb.Scene.node)
  return &_impl_.node_;
}
inline const ::pb::Node& Scene::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline const ::pb::Node& Scene::node(int index) const {
  // @@protoc_insertion_point(field_get:pb.Scene.node)
  return _internal_node(index);
}
inline ::pb::Node* Scene::_internal_add_node() {
  return _impl_.node_.Add();
}
inline ::pb::Node* Scene::add_node() {
  ::pb::Node* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:pb.Scene.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Node >&
Scene::node() const {
  // @@protoc_insertion_point(field_list:pb.Scene.node)
  return _impl_.node_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
